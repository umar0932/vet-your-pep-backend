# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Admin {
  createdBy: String
  createdDate: DateTime
  email: String!
  firstName: String!
  id: ID!
  isActive: Boolean
  lastName: String!
  password: String!
  platFormRules: [PlatFormRules!]
  profileImage: String
  updatedBy: String
  updatedDate: DateTime
}

type AdminEmailUpdateResponse {
  accessToken: String!
  user: Admin!
}

type AdminLoginResponse {
  accessToken: String!
  user: Admin!
}

type Channel {
  about: String
  backgroundImage: String
  createdBy: String
  createdDate: DateTime
  events: [Events!]
  id: ID!
  image: String
  isPaid: Boolean!
  members: [ChannelMember!]
  moderator: Customer!
  moderatorId: String!
  posts: [Post!]
  price: Float
  rules: String
  status: ChannelStatus!
  title: String!
  totalMembers: Int
  updatedBy: String
  updatedDate: DateTime
}

input ChannelFilterInputs {
  search: String
  title: String
}

type ChannelMember {
  channel: Channel!
  createdBy: String
  createdDate: DateTime
  customer: Customer!
  id: ID!
  paidStatus: Boolean!
  roleChannel: ChannelUserRole!
  updatedBy: String
  updatedDate: DateTime
}

"""The status of channels"""
enum ChannelStatus {
  PRIVATE
  PUBLIC
}

"""The status of ChannelUserRole"""
enum ChannelUserRole {
  ADMIN
  MEMBER
  MODERATOR
}

type Comments {
  content: String!
  createdBy: String
  createdDate: DateTime
  id: ID!
  post: Post!
  updatedBy: String
  updatedDate: DateTime
  user: Customer!
}

input CommentsFilterInputs {
  search: String
}

input CreateAdminUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input CreateChannelInput {
  about: String
  backgroundImage: String
  image: String
  moderatorId: String!
  rules: String
  status: ChannelStatus! = PUBLIC
  title: String!
  totalPrice: Int = 0
}

input CreateChargeInput {
  amount: Int!
  customerId: String!
  paymentMethodId: String!
}

input CreateCommentInput {
  content: String!
  postId: String!
}

input CreateCustomerInput {
  cellPhone: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input CreateEventInput {
  channelId: String!
  images: [String!]
  text: String!
  title: String!
}

input CreateLikeInput {
  postId: String!
}

input CreatePlatFormRulesInput {
  rules: String
  title: String!
}

input CreatePostInput {
  body: String!
  channelId: String!
  images: [String!]
}

type Customer {
  cellPhone: String
  channelMembers: [Channel!]
  channels: [Channel!]
  comments: [Comments!]
  createdBy: String
  createdDate: DateTime
  email: String!
  firstName: String!
  followers: [CustomerFollower!]
  following: [CustomerFollower!]
  id: ID!
  isActive: Boolean
  lastName: String!
  likes: [Likes!]
  password: String!
  posts: [Post!]
  profileImage: String
  socialProvider: SocialProvider
  stripeCustomerId: String
  totalFollowers: Int
  totalFollowings: Int
  updatedBy: String
  updatedDate: DateTime
}

type CustomerEmailUpdateResponse {
  accessToken: String!
  user: Customer!
}

input CustomerFilterInput {
  cellPhone: String
  email: String
  firstName: String
  id: ID
  lastName: String
  search: String
}

type CustomerFollower {
  createdBy: String
  createdDate: DateTime
  followers: Customer
  following: Customer
  id: ID!
  updatedBy: String
  updatedDate: DateTime
}

type CustomerLoginOrRegisterResponse {
  accessToken: String!
  user: Customer!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input EventFilterInputs {
  search: String
}

type Events {
  channel: Channel!
  createdBy: String
  createdDate: DateTime
  id: ID!
  images: [String!]
  text: String!
  title: String!
  updatedBy: String
  updatedDate: DateTime
}

type Likes {
  createdBy: String
  createdDate: DateTime
  id: ID!
  post: Post
  updatedBy: String
  updatedDate: DateTime
  user: Customer
}

input ListChannelsInput {
  filter: ChannelFilterInputs
  joined: Boolean = true
  limit: Float!
  offset: Float = 0
}

type ListChannelsResponse {
  limit: Float!
  offset: Float
  results: [Channel!]!
  totalRows: Float
}

input ListCommentsInput {
  filter: CommentsFilterInputs
  limit: Float!
  offset: Float = 0
}

type ListCommentsResponse {
  limit: Float!
  offset: Float
  results: [Comments!]!
  totalRows: Float
}

input ListCustomersInputs {
  filter: CustomerFilterInput
  limit: Float!
  offset: Float = 0
}

type ListCustomersResponse {
  limit: Float!
  offset: Float
  results: [Customer!]!
  totalRows: Float
}

input ListEventsInput {
  filter: EventFilterInputs
  limit: Float!
  offset: Float = 0
}

type ListEventsResponse {
  limit: Float!
  offset: Float
  results: [Events!]!
  totalRows: Float
}

input ListPlatFormRulesInput {
  filter: PlatFormRulesFilterInputs
  limit: Float!
  offset: Float = 0
}

type ListPlatFormRulesResponse {
  limit: Float!
  offset: Float
  results: [PlatFormRules!]!
  totalRows: Float
}

input ListPostsInput {
  channelId: String
  customerId: String
  filter: PostFilterInputs
  limit: Float!
  myPosts: Boolean = false
  offset: Float = 0
  userFeed: Boolean = false
}

type ListPostsResponse {
  limit: Float!
  offset: Float
  results: [Post!]!
  totalRows: Float
}

input LoginAdminInput {
  email: String!
  password: String!
}

input LoginCustomerInput {
  email: String!
  password: String!
}

type Mutation {
  """Customer Social Registration"""
  continueWithSocialSite(input: RegisterOrLoginSocialInput!): CustomerLoginOrRegisterResponse!

  """Create new admin user"""
  createAdminUser(input: CreateAdminUserInput!): SuccessResponse!

  """This will create new Channel"""
  createChannel(input: CreateChannelInput!): SuccessResponse!

  """This will create new Comment"""
  createComment(input: CreateCommentInput!): SuccessResponse!

  """This will signup new Customers"""
  createCustomer(input: CreateCustomerInput!): CustomerLoginOrRegisterResponse!

  """This will create new Event"""
  createEvent(input: CreateEventInput!): SuccessResponse!

  """Create new plate form rules"""
  createPlatFormRule(input: CreatePlatFormRulesInput!): PlatFormRules!

  """This will create new Post"""
  createPost(input: CreatePostInput!): SuccessResponse!

  """This will follow a customer"""
  followCustomer(customerId: String!): SuccessResponse!

  """To Join new Channel"""
  joinChannel(channelId: String!): SuccessResponse!

  """This will create new Channel"""
  leaveChannel(input: UpdateChannelInput!): SuccessResponse!

  """This will create new Like on Post"""
  likePost(input: CreateLikeInput!): Likes!

  """Admin Login"""
  loginAsAdmin(input: LoginAdminInput!): AdminLoginResponse!

  """Customer Login"""
  loginAsCustomer(input: LoginCustomerInput!): CustomerLoginOrRegisterResponse!

  """This will save/update user profile image in DB"""
  saveCustomerMediaUrl(fileName: String!): String!

  """This will charge the Customer on test stripe"""
  testCharge(chargeInput: CreateChargeInput!): SuccessResponse!

  """This will unfollow a customer"""
  unfollowCustomer(customerId: String!): SuccessResponse!

  """This will unlike Post"""
  unlikePost(input: UpdateLikeInput!): Likes!

  """Update admin data"""
  updateAdminData(input: UpdateAdminUserInput!): String!

  """Update admin email"""
  updateAdminEmail(input: String!): AdminEmailUpdateResponse!

  """This will update Admin Password"""
  updateAdminPassword(password: String!): SuccessResponse!

  """This will update Channel"""
  updateChannel(input: UpdateChannelInput!): SuccessResponse!

  """This will update new Comment"""
  updateComment(input: UpdateCommentInput!): SuccessResponse!

  """This will update Customer"""
  updateCustomer(input: UpdateCustomerInput!): Customer!

  """Update customer email"""
  updateCustomerEmail(input: String!): CustomerEmailUpdateResponse!

  """This will update Customer Password"""
  updateCustomerPassword(password: String!): SuccessResponse!

  """This will update Event"""
  updateEvent(input: UpdateEventInput!): SuccessResponse!

  """This will update Event"""
  updatePlatFormRule(input: UpdatePlatFormRulesInput!): PlatFormRules!

  """This will update new Post"""
  updatePost(input: UpdatePostInput!): SuccessResponse!
}

type OtherCustomerDataResponse {
  isFollowing: Boolean!
  user: Customer!
}

type PageData {
  count: Int!
  limit: Int
  offset: Int
}

type PartialEventResponse {
  results: [Events!]!
}

type PlatFormRules {
  admin: Admin!
  createdBy: String
  createdDate: DateTime
  id: ID!
  rules: String!
  title: String!
  updatedBy: String
  updatedDate: DateTime
}

input PlatFormRulesFilterInputs {
  search: String
  title: String
}

type Post {
  body: String!
  channel: Channel!
  comments: [Comments!]
  createdBy: String
  createdDate: DateTime
  customer: Customer!
  id: ID!
  images: [String!]
  likeCount: Int
  likes: [Likes!]
  updatedBy: String
  updatedDate: DateTime
}

input PostFilterInputs {
  search: String
}

type Query {
  """To get a Channel"""
  getChannelById(input: String!): Channel!

  """Get S3 bucket Signed Url"""
  getChannelUploadUrl: S3SignedUrlResponse!

  """
  The List of Channels user have joined or not with Pagination and filters
  """
  getChannels(input: ListChannelsInput!): ListChannelsResponse!

  """Get Session Token for Chat SDK"""
  getChatToken: String!

  """The List of comments with Pagination and filters"""
  getComments(input: ListCommentsInput!): ListCommentsResponse!

  """Get the Customer"""
  getCustomerData: Customer!

  """Get S3 bucket Signed Url"""
  getCustomerUploadUrl: S3SignedUrlResponse!

  """The List of Customers with Pagination and filters"""
  getCustomersAdmin(input: ListCustomersInputs!): ListCustomersResponse!

  """To get a an event"""
  getEventById(input: String!): Events!

  """Get S3 bucket Signed Url"""
  getEventUploadUrls(count: Float!): [S3SignedUrlResponse!]!

  """The List of events with Pagination and filters"""
  getEvents(input: ListEventsInput!): ListEventsResponse!

  """The List of events by channelId"""
  getEventsByChannel(channelId: String!): PartialEventResponse!

  """Get the followers of the authenticated customer"""
  getFollowers(customerId: String!): [Customer!]!

  """Get the following of the authenticated customer"""
  getFollowing(customerId: String!): [Customer!]!

  """Get other Customer Data"""
  getOtherCustomerData(customerId: String!): OtherCustomerDataResponse!

  """The List of PlatForm rules Pagination and filters"""
  getPlatFormRules(input: ListPlatFormRulesInput!): ListPlatFormRulesResponse!

  """To get a platform rules"""
  getPlatFormRulesById(input: String!): PlatFormRules!

  """Get S3 bucket Signed Url"""
  getPostUploadUrls(count: Float!): [S3SignedUrlResponse!]!

  """The List of posts with Pagination and filters"""
  getPosts(input: ListPostsInput!): ListPostsResponse!

  """The List of Customers with filters"""
  searchCustomers(search: String!): SearchCustomersResponse!

  """check if email already exist"""
  validEmailAdmin(input: String!): SuccessResponse!
}

input RegisterOrLoginSocialInput {
  accessToken: String!
  provider: SocialAuthProviders!
}

type S3SignedUrlResponse {
  fileName: String!
  signedUrl: String!
}

type SearchCustomersResponse {
  message: String
  results: [Customer!]
  totalCount: Float
}

"""Social provider types"""
enum SocialAuthProviders {
  GOOGLE
}

type SocialProvider {
  createdDate: DateTime!
  customer: Customer!
  id: ID!
  provider: SocialAuthProviders!
  socialId: String!
}

type SuccessResponse {
  message: String
  success: Boolean
}

input UpdateAdminUserInput {
  email: String
  firstName: String
  lastName: String
  profileImage: String
}

input UpdateChannelInput {
  about: String
  backgroundImage: String
  id: ID!
  image: String
  rules: String
  title: String!
}

input UpdateCommentInput {
  commentId: ID!
  content: String!
  postId: String!
}

input UpdateCustomerInput {
  cellPhone: String
  firstName: String
  isActive: Boolean
  lastName: String
  profileImage: String
  stripeCustomerId: String
}

input UpdateEventInput {
  channelId: String!
  eventId: ID!
  images: [String!]
  text: String!
  title: String!
}

input UpdateLikeInput {
  postId: String!
}

input UpdatePlatFormRulesInput {
  platFormRulesId: ID!
  rules: String
  title: String!
}

input UpdatePostInput {
  body: String!
  channelId: String!
  images: [String!]
  postId: ID!
}